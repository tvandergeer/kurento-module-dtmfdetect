/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include "MediaPipelineImpl.hpp"
#include <DtmfDetectImplFactory.hpp>
#include "DtmfDetectImpl.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>
#include "SignalHandler.hpp"

#define GST_CAT_DEFAULT kurento_dtmf_detect_impl
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
#define GST_DEFAULT_NAME "KurentoDtmfDetectImpl"

namespace kurento
{
namespace module
{
namespace dtmfdetect
{
  
void DtmfDetectImpl::busMessage (GstMessage *message)
{

  if (GST_MESSAGE_SRC (message) == GST_OBJECT (dtmfdetect) &&
      GST_MESSAGE_TYPE (message) == GST_MESSAGE_ELEMENT) {
    const GstStructure *st;
      gint type, number, method;

    st = gst_message_get_structure (message);

    if (g_strcmp0 (gst_structure_get_name (st), "dtmf-event") != 0) {
      return;
    }

    if (!gst_structure_get (st, 
                            "type", G_TYPE_INT, &type, 
                            "number", G_TYPE_INT, &number,
                            "method", G_TYPE_INT, &method, NULL) ) {
      return;
    }

    std::string valueStr = std::to_string(number);

    dtmfDetected (valueStr);
  }
}
  
void DtmfDetectImpl::postConstructor ()
{
  GstBus *bus;
  std::shared_ptr<MediaPipelineImpl> pipe;

  FilterImpl::postConstructor ();

  pipe = std::dynamic_pointer_cast<MediaPipelineImpl> (getMediaPipeline() );

  bus = gst_pipeline_get_bus (GST_PIPELINE (pipe->getPipeline() ) );
  
  //Start listening for messages
  bus_handler_id = register_signal_handler (G_OBJECT (bus),
                   "message",
                   std::function <void (GstElement *, GstMessage *) >
                   (std::bind (&DtmfDetectImpl::busMessage, this,
                               std::placeholders::_2) ),
                   std::dynamic_pointer_cast<DtmfDetectImpl>
                   (shared_from_this() ) );
  g_object_unref (bus);
}

DtmfDetectImpl::DtmfDetectImpl (const boost::property_tree::ptree &config, 
                                std::shared_ptr<MediaPipeline> mediaPipeline)  : 
    FilterImpl (config, std::dynamic_pointer_cast<MediaObjectImpl> ( mediaPipeline) ) 
{
  g_object_set (element, "filter-factory", "dtmfdetect", NULL);
  g_object_get (G_OBJECT (element), "filter", &dtmfdetect, NULL);

  if (dtmfdetect == NULL) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "MediaObject not found");
  }

  bus_handler_id = 0;
  // There is no need to reference dtmfdetect because its lifecycle is the same as the filter lifeycle
  g_object_unref (dtmfdetect);
}

void DtmfDetectImpl::dtmfDetected (std::string &value){
  try {
    DtmfDetected event (shared_from_this(), DtmfDetected::getName(), value);
    signalDtmfDetected (event);
  } catch (std::bad_weak_ptr &e) {
  }
}

MediaObjectImpl *
DtmfDetectImplFactory::createObject (const boost::property_tree::ptree &config, 
                                     std::shared_ptr<MediaPipeline> mediaPipeline) const
{
  return new DtmfDetectImpl (config, mediaPipeline);
}

DtmfDetectImpl::~DtmfDetectImpl ()
{
  std::shared_ptr<MediaPipelineImpl> pipe;

  if (bus_handler_id > 0) {
    pipe = std::dynamic_pointer_cast<MediaPipelineImpl> (getMediaPipeline() );
    GstBus *bus = gst_pipeline_get_bus (GST_PIPELINE (pipe->getPipeline() ) );
    unregister_signal_handler (bus, bus_handler_id);
    g_object_unref (bus);
  }
}

DtmfDetectImpl::StaticConstructor DtmfDetectImpl::staticConstructor;

DtmfDetectImpl::StaticConstructor::StaticConstructor()
{
  GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, GST_DEFAULT_NAME, 0,
                           GST_DEFAULT_NAME);
}

} /* dtmfdetect */
} /* module */
} /* kurento */
